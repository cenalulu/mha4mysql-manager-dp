.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MHA::SlaveFailover 3"
.TH MHA::SlaveFailover 3 "2014-05-06" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.Vb 1
\&  foreach my $slave (@alive_slaves) {
\&
\&    # Master_Host is either hostname or IP address of the current master
\&    if ( $dead_master\->{hostname} ne $slave\->{Master_Host}
\&      && $dead_master\->{ip}       ne $slave\->{Master_Host}
\&      && $dead_master\->{hostname} ne $slave\->{Master_IP}
\&      && $dead_master\->{ip}       ne $slave\->{Master_IP} )
\&    {
\&      $log\->error(
\&        sprintf(
\&          "Slave %s does not replicate from dead master %s. Stop failover.",
\&          $slave\->get_hostinfo(), $dead_master\->get_hostinfo()
\&        )
\&      );
\&      croak;
\&    }
\&    $slave\->{ssh_ok} = 2;
\&    $slave\->{diff_file_readtolatest} =
\&        "$slave\->{remote_workdir}/relay_from_read_to_latest_"
\&      . $slave\->{hostname} . "_"
\&      . $slave\->{port} . "_"
\&      . $_start_datetime
\&      . $_saved_file_suffix;
\&  }
\&  $_server_manager\->validate_num_alive_servers( $dead_master, 1 );
.Ve
.PP
.Vb 10
\&  my $slave_io_stopper = new Parallel::ForkManager( $#alive_slaves + 1 );
\&  my $stop_io_failed   = 0;
\&  $slave_io_stopper\->run_on_start(
\&    sub {
\&      my ( $pid, $target ) = @_;
\&    }
\&  );
\&  $slave_io_stopper\->run_on_finish(
\&    sub {
\&      my ( $pid, $exit_code, $target ) = @_;
\&      return if ( $target\->{ignore_fail} );
\&      $stop_io_failed = 1 if ($exit_code);
\&    }
\&  );
\&
\&  foreach my $target (@alive_slaves) {
\&    $slave_io_stopper\->start($target) and next;
\&    eval {
\&      my $rc = $target\->stop_io_thread();
\&      $slave_io_stopper\->finish($rc);
\&    };
\&    if ($@) {
\&      $log\->error($@);
\&      undef $@;
\&      $slave_io_stopper\->finish(1);
\&    }
\&    $slave_io_stopper\->finish(0);
\&  }
.Ve
.PP
.Vb 3
\&    $log\->info("* Phase 3.1: Getting Latest Slaves Phase..\en");
\&    $log\->info();
\&    check_set_latest_slaves();
\&
\&    $log\->info();
\&    $log\->info("* Phase 3.2: Saving Dead Slave\*(Aqs Binlog Phase..\en");
\&    $log\->info();
\&    save_slave_binlog($dead_slave);
\&
\&    $log\->info();
\&    $log\->info("* Phase 3.3: Determining New Slave Phase..\en");
\&    $log\->info();
\&    my $latest_base_slave = find_latest_base_slave($dead_slave);
\&    $new_slave = select_new_slave( $dead_slave, $latest_base_slave );
\&    my ( $slave_log_file, $slave_log_pos ) =
\&      recover_slave( $dead_slave, $new_slave, $latest_base_slave );
\&    $new_slave\->{activated} = 1;
\&
\&    $log\->info("* Phase 3: Slave Recovery Phase completed.\en");
\&    $log\->info();
\&    $log\->info("* Phase 4: Slaves Recovery Phase..\en");
\&    $log\->info();
\&    $error_code = recover_slaves(
\&      $dead_slave,     $new_slave, $latest_base_slave,
\&      $slave_log_file, $slave_log_pos
\&    );
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 126:" 4
.IX Item "Around line 126:"
=pod directives shouldn't be over one line long!  Ignoring all 19 lines of content
.IP "Around line 199:" 4
.IX Item "Around line 199:"
=pod directives shouldn't be over one line long!  Ignoring all 7 lines of content
.IP "Around line 328:" 4
.IX Item "Around line 328:"
=pod directives shouldn't be over one line long!  Ignoring all 44 lines of content
.IP "Around line 394:" 4
.IX Item "Around line 394:"
=pod directives shouldn't be over one line long!  Ignoring all 4 lines of content
.IP "Around line 442:" 4
.IX Item "Around line 442:"
=pod directives shouldn't be over one line long!  Ignoring all 7 lines of content
.IP "Around line 471:" 4
.IX Item "Around line 471:"
=pod directives shouldn't be over one line long!  Ignoring all 5 lines of content
