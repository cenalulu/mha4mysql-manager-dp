#!/usr/bin/env perl

#  Copyright (C) 2011 DeNA Co.,Ltd.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#  Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

## Note: This is a sample script and is not complete. Modify the script based on your environment.

use strict;
use warnings FATAL => 'all';

use Getopt::Long;
use MHA::DBHelper;
use MHA::NodeUtil;
use Time::HiRes qw( sleep gettimeofday tv_interval );
use Data::Dumper;
use LWP::UserAgent;

my $_tstart;
my $_running_interval = 0.1;
my $slave_mysql_user='msandbox';
my $slave_mysql_pass='msandbox';
my (
  $command,
  $new_node_host, $new_node_ip, $new_node_port
);
GetOptions(
  'command=s'          => \$command,
  'new_node_host=s'  => \$new_node_host,
  'new_node_ip=s'    => \$new_node_ip,
  'new_node_port=i'  => \$new_node_port,
);

exit &main();

sub current_time_us {
  my ( $sec, $microsec ) = gettimeofday();
  my $curdate = localtime($sec);
  return $curdate . " " . sprintf( "%06d", $microsec );
}

sub sleep_until {
  my $elapsed = tv_interval($_tstart);
  if ( $_running_interval > $elapsed ) {
    sleep( $_running_interval - $elapsed );
  }
}

sub main {
  if ( $command eq "online" ) {
    ## Gracefully killing connections on the current master
    # 1. Set read_only= 1 on the new master
    # 2. DROP USER so that no app user can establish new connections
    # 3. Set read_only= 1 on the current master
    # 4. Kill current queries
    # * Any database access failure will result in script die.
    my $exit_code = 1;
    eval {
        my $ua=LWP::UserAgent->new;
        $ua->timeout(5);
        my $url='http://zebra-web01.beta/a/service';
        my $request_hash= [
                "op"=>'markUp',
                "env"=>'dev',
                "ip"=>$new_node_ip,
                "port"=>$new_node_port,
        ];
        my $remote_response=$ua->post($url,$request_hash);
        my $content=$remote_response->decoded_content;
        
        if($content =~ /\{\"status\"\:\ \"0\"/){
            print "The response from remote server $url is OK:$content\n";
        }else{
            #remote response is not OK
            print "$@";
            warn "The response from remote server $url is not OK:$content\n";
            $exit_code=1;
            exit $exit_code;
        }
        $exit_code = 0;
    };

    if ($@) {
      warn "Got Error: $@\n";
      exit $exit_code;
    }
    exit $exit_code;
  }
  else {
    &usage();
    exit 1;
  }
}

sub usage {
  print
"Usage: node_ip_online --command=online --new_node_host=host --new_node_ip=ip --new_node_port=port\n";
  die;
}

